#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('socketiospeed:server');
const http = require('http');
const server = require('http').Server(app);
const io = require('socket.io')(server);
const fs = require('fs');

//console.log(fs.readFileSync("./public/javascripts/ammo.js",{encoding:'utf8'}));
eval(fs.readFileSync("./public/javascripts/ammo.js", {
  encoding: 'utf8'
}));
//console.log(Ammo);
//const Ammo = require('../public/javascripts/ammo.js');
const terrainWidth = 512;
const terrainDepth = 512;
const controls = {};
const actions = {};
const carlist = [
  "fordgt90",
  "koenigsegg",
  "laferrari",
  "zonda",
  "car1",
  "car2",
  "car3",
  "car4",
  "car5",
  "car6"
];
for (let car of carlist) {
  controls[car] = {};
  controls[car].moveForward = false;
  controls[car].moveBackward = false;
  controls[car].moveLeft = false;
  controls[car].moveRight = false;
}
const carData = {
  "fordgt90": {
    "body_url": "obj/fordBody.json",
    "wheel_url": "",
    "engineForce": 600
  },
  "koenigsegg": {
    "body_url": "obj/koenigsegg/koenigsegg_body.json",
    "wheel_url": "",
    "rotation": Math.PI,
    "bodyOffsetHeight": 0,
    "scale": 1.5,
    "massVehicle": 1100,
    "wheelAxisPositionBack": -1.7,
    "wheelWidthBack": .0,
    "wheelAxisFrontPosition": 1.5,
    "wheelWidthFront": .0,
    "wheelRadiusBack": .4,

    "engineForce": 600
  },
  "camaro": {
    "body_url": "obj/camaro/camaro_body.json",
    "wheel_url": "",
    "rotation": 0,
    "bodyOffsetHeight": 0.5,
    "scale": 1.0,
    "massVehicle": 1700,
    "wheelAxisPositionBack": -1.7,
    "wheelWidthBack": -0.1,
    "wheelAxisFrontPosition": 1.9,
    "wheelWidthFront": -0.1,
    "wheelRadiusBack": 0.4,
    "engineForce": 600
  },
  "zonda": {
    "body_url": "obj/zonda/zonda_body.json",
    "wheel_url": "",
    "bodyOffsetHeight": 0.5,
    "rotation": 0,
    "scale": 1.0,
    "massVehicle": 1200,
    "wheelAxisPositionBack": -2.05,
    "wheelWidthBack": 0.1,
    "wheelAxisFrontPosition": 1.7,
    "wheelWidthFront": 0.1,
    "wheelRadiusBack": 0.4,
    "engineForce": 600
  },
  "laferrari": {
    "body_url": "obj/laferrari/laferrari_body.json",
    "wheel_url": "",
    "bodyOffsetHeight": 0,
    "rotation": Math.PI,
    "scale": 1.5,
    "massVehicle": 1200,
    "wheelAxisPositionBack": -2.05,
    "wheelWidthBack": 0.1,
    "wheelAxisFrontPosition": 1.7,
    "wheelWidthFront": 0.1,
    "wheelRadiusBack": 0.4,
    "engineForce": 600
  }
};


Ammo().then((Ammo) => {
  const vehicles = [];

  let heightData = null;
  let ammoHeightData = null;
  const terrainHalfWidth = terrainWidth / 2;
  const terrainHalfDepth = terrainDepth / 2;
  const terrainMaxHeight = 18;
  const terrainMinHeight = -10;
  const terrainWidthExtents = 5000;
  const terrainDepthExtents = 5000;

  // - Global variables -
  const DISABLE_DEACTIVATION = 4;
  const TRANSFORM_AUX = new Ammo.btTransform();
  const ZERO_QUATERNION = [0, 0, 0, 1];

  // Graphics variables
  let container, stats, speedometer;
  let camera, scene, renderer;
  let camera2, renderer2;
  var terrainMesh, texture;

  let materialDynamic, materialStatic, materialInteractive;

  // Physics variables
  let collisionConfiguration;
  let dispatcher;
  let broadphase;
  let solver;
  let physicsWorld;

  const syncList = [];
  let time = 0;
  const objectTimePeriod = 3;
  const timeNextSpawn = time + objectTimePeriod;
  const maxNumObjects = 30;
  let gCarname = "car4";

  // Keybord actions

  const keysActions = {
    "KeyW": 'acceleration',
    "KeyS": 'braking',
    "KeyA": 'left',
    "KeyD": 'right'
  };
  const carKind = {
    "car1": "koenigsegg",
    "car2": "koenigsegg",
    "car3": "camaro",
    "car4": "zonda",
    "car5": "laferrari"
  };
  const cars = ["car1", "car2", "car3", "car4", "car5"];
  for (let car of cars) {
    actions[car] = {};
  }
  //console.dir(actions);
  const campos = new Ammo.btVector3(0, 1.4, -6);

  // - Functions -

  const initGraphics = () => {};

  const initPhysics = () => {

    // Physics configuration
    collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
    dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);
    broadphase = new Ammo.btDbvtBroadphase();
    solver = new Ammo.btSequentialImpulseConstraintSolver();
    physicsWorld = new Ammo.btDiscreteDynamicsWorld(dispatcher, broadphase, solver,
      collisionConfiguration);
    physicsWorld.setGravity(new Ammo.btVector3(0, -9.82, 0));
  };

  let saved_t = Date.now();
  const tick = () => {
    setTimeout(tick, 30);
    const now = Date.now();
    const dt = now - saved_t;
    //console.log(`dt = ${dt}`);
    saved_t = now;
    for (let syncItem of syncList) {
      syncItem(dt);
    }
    physicsWorld.stepSimulation(dt / 1000, 50, 1 / 60);
    //controls.update(dt);
    time += dt;
  };

  const createBox = (pos, quat, w, l, h, mass, friction) => {
    //const material = mass > 0 ? materialDynamic : materialStatic;
    const geometry = new Ammo.btBoxShape(new Ammo.btVector3(w * 0.5, l * 0.5, h * 0.5));

    if (!mass) mass = 0;
    if (!friction) friction = 1;

    const transform = new Ammo.btTransform();
    transform.setIdentity();
    transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
    transform.setRotation(new Ammo.btQuaternion(quat[0], quat[1], quat[2], quat[3]));
    const motionState = new Ammo.btDefaultMotionState(transform);

    const localInertia = new Ammo.btVector3(0, 0, 0);
    geometry.calculateLocalInertia(mass, localInertia);

    const rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, geometry,
      localInertia);
    const body = new Ammo.btRigidBody(rbInfo);

    body.setFriction(friction);
    //body.setRestitution(.9);
    //body.setDamping(0.2, 0.2);

    physicsWorld.addRigidBody(body);

    if (mass > 0) {
      body.setActivationState(DISABLE_DEACTIVATION);
      // Sync physics and graphics
      const sync = (dt) => {
        const ms = body.getMotionState();
        if (ms) {
          ms.getWorldTransform(TRANSFORM_AUX);
          const p = TRANSFORM_AUX.getOrigin();
          const q = TRANSFORM_AUX.getRotation();
          //mesh.position.set(p.x(), p.y(), p.z());
          //mesh.quaternion.set(q.x(), q.y(), q.z(), q.w());
        }
      };
      syncList.push(sync);
    }
  };

  const createVehicle = (name, kind, pos, quat) => {
    console.log(`createVehicle kind=${kind}`);
    // Vehicle contants
    const carname = name;
    const carkind = kind;
    const chassisWidth = 1.8;
    const chassisHeight = 0.6;
    const chassisLength = 4;
    const massVehicle = carData[kind].massVehicle;

    const wheelAxisPositionBack = carData[kind].wheelAxisPositionBack;
    const wheelRadiusBack = carData[kind].wheelRadiusBack;
    const wheelWidthBack = carData[kind].wheelWidthBack;
    const wheelHalfTrackBack = 1.1;
    const wheelAxisHeightBack = 0.3;

    const wheelAxisFrontPosition = carData[kind].wheelAxisFrontPosition;
    const wheelHalfTrackFront = 1;
    const wheelAxisHeightFront = 0.3;
    const wheelRadiusFront = 0.35;
    const wheelWidthFront = carData[kind].wheelWidthFront;

    const friction = 100;
    const suspensionStiffness = 20.0;
    const suspensionDamping = 2.3;
    const suspensionCompression = 4.4;
    const suspensionRestLength = 0.6;
    const rollInfluence = 0.0;

    const steeringIncrement = 0.01;
    const steeringClamp = 0.5;
    const maxEngineForce = 4000;
    const maxBreakingForce = 200;

    // Chassis
    const geometry = new Ammo.btBoxShape(new Ammo.btVector3(chassisWidth * 0.5, chassisHeight *
      0.5,
      chassisLength * 0.5));
    const transform = new Ammo.btTransform();
    transform.setIdentity();
    transform.setOrigin(new Ammo.btVector3(pos[0], pos[1], pos[2]));
    transform.setRotation(new Ammo.btQuaternion(quat[0], quat[1], quat[2], quat[3]));
    const motionState = new Ammo.btDefaultMotionState(transform);
    const localInertia = new Ammo.btVector3(0, 0, 0);
    geometry.calculateLocalInertia(massVehicle, localInertia);
    const body = new Ammo.btRigidBody(new Ammo.btRigidBodyConstructionInfo(massVehicle,
      motionState, geometry, localInertia));
    body.setActivationState(DISABLE_DEACTIVATION);
    physicsWorld.addRigidBody(body);

    // Raycast Vehicle
    let engineForce = 0;
    let vehicleSteering = 0;
    let breakingForce = 0;
    const tuning = new Ammo.btVehicleTuning();
    const rayCaster = new Ammo.btDefaultVehicleRaycaster(physicsWorld);
    const vehicle = new Ammo.btRaycastVehicle(tuning, body, rayCaster);
    vehicle.setCoordinateSystem(0, 1, 2);
    physicsWorld.addAction(vehicle);

    // Wheels
    const FRONT_LEFT = 0;
    const FRONT_RIGHT = 1;
    const BACK_LEFT = 2;
    const BACK_RIGHT = 3;
    const wheelMeshes = [];
    const wheelDirectionCS0 = new Ammo.btVector3(0, -1, 0);
    const wheelAxleCS = new Ammo.btVector3(-1, 0, 0);

    const addWheel = (name, isFront, pos, radius, width, index) => {
      const wheelInfo = vehicle.addWheel(
        pos,
        wheelDirectionCS0,
        wheelAxleCS,
        suspensionRestLength,
        radius,
        tuning,
        isFront);

      wheelInfo.set_m_suspensionStiffness(suspensionStiffness);
      wheelInfo.set_m_wheelsDampingRelaxation(suspensionDamping);
      wheelInfo.set_m_wheelsDampingCompression(suspensionCompression);
      wheelInfo.set_m_frictionSlip(friction);
      wheelInfo.set_m_rollInfluence(rollInfluence);
    };

    addWheel(name, true, new Ammo.btVector3(wheelHalfTrackFront, wheelAxisHeightFront,
      wheelAxisFrontPosition), wheelRadiusFront, wheelWidthFront, FRONT_LEFT);
    addWheel(name, true, new Ammo.btVector3(-wheelHalfTrackFront, wheelAxisHeightFront,
      wheelAxisFrontPosition), wheelRadiusFront, wheelWidthFront, FRONT_RIGHT);
    addWheel(name, false, new Ammo.btVector3(-wheelHalfTrackBack, wheelAxisHeightBack,
      wheelAxisPositionBack), wheelRadiusBack, wheelWidthBack, BACK_LEFT);
    addWheel(name, false, new Ammo.btVector3(wheelHalfTrackBack, wheelAxisHeightBack,
      wheelAxisPositionBack), wheelRadiusBack, wheelWidthBack, BACK_RIGHT);

    // Sync keybord actions and physics and graphics
    const sync = (dt) => {
      const speed = vehicle.getCurrentSpeedKmHour();

      breakingForce = 0;
      engineForce = 0;

      if (actions[carname].acceleration) {
        if (speed < -1)
          breakingForce = maxBreakingForce;
        else engineForce = maxEngineForce;
      }
      if (actions[carname].braking) {
        if (speed > 1)
          breakingForce = maxBreakingForce;
        else engineForce = -maxEngineForce / 2;
      }
      if (actions[carname].left) {
        if (vehicleSteering < steeringClamp)
          vehicleSteering += steeringIncrement;
      } else {
        if (actions[carname].right) {
          if (vehicleSteering > -steeringClamp)
            vehicleSteering -= steeringIncrement;
        } else {
          if (vehicleSteering < -steeringIncrement)
            vehicleSteering += steeringIncrement;
          else {
            if (vehicleSteering > steeringIncrement)
              vehicleSteering -= steeringIncrement;
            else {
              vehicleSteering = 0;
            }
          }
        }
      }

      vehicle.applyEngineForce(engineForce, BACK_LEFT);
      vehicle.applyEngineForce(engineForce, BACK_RIGHT);

      vehicle.setBrake(breakingForce / 2, FRONT_LEFT);
      vehicle.setBrake(breakingForce / 2, FRONT_RIGHT);
      vehicle.setBrake(breakingForce, BACK_LEFT);
      vehicle.setBrake(breakingForce, BACK_RIGHT);

      vehicle.setSteeringValue(vehicleSteering, FRONT_LEFT);
      vehicle.setSteeringValue(vehicleSteering, FRONT_RIGHT);

      const n = vehicle.getNumWheels();
      for (let i = 0; i < n; i++) {
        vehicle.updateWheelTransform(i, true);
      }
    };
    syncList.push(sync);
    return vehicle;
  };

  const createGround = () => {
    // Create the terrain body
    heightData = generateHeight(terrainWidth, terrainDepth, terrainMinHeight, terrainMaxHeight);
    const scaleX = terrainWidthExtents / (terrainWidth - 1);
    const scaleZ = terrainDepthExtents / (terrainDepth - 1);

    const groundShape = createTerrainShape(heightData);
    const groundTransform = new Ammo.btTransform();
    groundTransform.setIdentity();
    // Shifts the terrain, since bullet re-centers it on its bounding box.
    groundTransform.setOrigin(new Ammo.btVector3(0, (terrainMaxHeight + terrainMinHeight) / 2, 0));
    const groundMass = 0;
    const groundLocalInertia = new Ammo.btVector3(0, 0, 0);
    const groundMotionState = new Ammo.btDefaultMotionState(groundTransform);
    const groundBody = new Ammo.btRigidBody(new Ammo.btRigidBodyConstructionInfo(groundMass, groundMotionState, groundShape, groundLocalInertia));
    physicsWorld.addRigidBody(groundBody);
  };
  const addCars = () => {
    vehicles.push(createVehicle("car1", "koenigsegg", [0, 4, -2000], ZERO_QUATERNION));
    vehicles.push(createVehicle("car2", "koenigsegg", [0, 4, -4000], ZERO_QUATERNION));
    vehicles.push(createVehicle("car3", "camaro", [0, 8, 800], ZERO_QUATERNION));
    vehicles.push(createVehicle("car4", "zonda", [0, 14, -1300], ZERO_QUATERNION));
    vehicles.push(createVehicle("car5", "laferrari", [0, 14, -100], ZERO_QUATERNION));
  };

  const createObjects = () => {
    //createBox(new Ammo.btVector3(0, -0.5, 0), ZERO_QUATERNION, 750, 1, 750, 0, 2);
    createGround();

    const quaternion = [0, 0, 0, 1];
    //quaternion.setFromAxisAngle(new Ammo.btVector3(1, 0, 0), -Math.PI / 5);
    createBox(new Ammo.btVector3(0, -1.5, 0), quaternion, 8, 4, 10, 0);

    const size = 0.85;
    const nw = 6;
    const nh = 5;
    for (let j = 0; j < nw; j++)
      for (let i = 0; i < nh; i++)
        createBox(new Ammo.btVector3(size * j - (size * (nw - 1)) / 2, size * i, 10),
          ZERO_QUATERNION, size, size, size, 10);

    addCars();
    console.dir(vehicles);
  };

  const generateHeight = (width, depth, minHeight, maxHeight) => {
    // Generates the height data (a sinus wave)
    const size = width * depth;
    const data = new Float32Array(size);
    const hRange = maxHeight - minHeight;
    const w2 = width / 2;
    const d2 = depth / 2;
    const phaseMult = 12;
    let p = 0;
    for (let j = 0; j < depth; j++) {
      for (let i = 0; i < width; i++) {
        var radius = Math.sqrt(
          Math.pow((i - w2) / w2, 2.0) +
          Math.pow((j - d2) / d2, 2.0));
        const height = (Math.sin(radius * phaseMult) + 1) * 0.5 * hRange + minHeight;
        data[p] = height;
        p++;
      }
    }
    return data;
  };
  const createTerrainShape = () => {
    // This parameter is not really used, since we are using PHY_FLOAT height data type and hence it is ignored
    const heightScale = 1;
    // Up axis = 0 for X, 1 for Y, 2 for Z. Normally 1 = Y is used.
    const upAxis = 1;
    // hdt, height data type. "PHY_FLOAT" is used. Possible values are "PHY_FLOAT", "PHY_UCHAR", "PHY_SHORT"
    const hdt = "PHY_FLOAT";
    // Set this to your needs (inverts the triangles)
    const flipQuadEdges = false;
    // Creates height data buffer in Ammo heap
    ammoHeightData = Ammo._malloc(4 * terrainWidth * terrainDepth);
    // Copy the javascript height data array to the Ammo one.
    let p = 0;
    let p2 = 0;
    for (let j = 0; j < terrainDepth; j++) {
      for (let i = 0; i < terrainWidth; i++) {
        // write 32-bit float data to memory
        Ammo.HEAPF32[ammoHeightData + p2 >> 2] = heightData[p];
        p++;
        // 4 bytes/float
        p2 += 4;
      }
    }
    // Creates the heightfield physics shape
    const heightFieldShape = new Ammo.btHeightfieldTerrainShape(
      terrainWidth,
      terrainDepth,
      ammoHeightData,
      heightScale,
      terrainMinHeight,
      terrainMaxHeight,
      upAxis,
      hdt,
      flipQuadEdges
    );
    // Set horizontal scale
    const scaleX = terrainWidthExtents / (terrainWidth - 1);
    const scaleZ = terrainDepthExtents / (terrainDepth - 1);
    heightFieldShape.setLocalScaling(new Ammo.btVector3(scaleX, 1, scaleZ));
    heightFieldShape.setMargin(0.05);
    return heightFieldShape;
  };

  // - Init -
  initGraphics();
  initPhysics();
  createObjects();

  io.on('connection', (socket) => {
    console.log('a user connected');
    socket.on('getObjs', (msg) => {
      (() => {
        const obj = {};
        obj.wheel = [];
        obj.position = [];
        obj.quaternion = [];
        let idx = 0;
        //console.log(`io on vehicles = ${vehicles}`);
        for (const vehicle of vehicles) {
          obj.idx = idx;

          const n = vehicle.getNumWheels();
          const wheel = {};
          wheel.position = [];
          wheel.quaternion = [];
          for (let i = 0; i < n; i++) {
            const tm = vehicle.getWheelTransformWS(i);
            const p = tm.getOrigin();
            const q = tm.getRotation();
            //console.log("p = ",p.x());
            wheel.position[i] = [p.x(), p.y(), p.z()];
            wheel.quaternion[i] = [q.x(), q.y(), q.z(), q.w()];
          }
          obj.wheel[idx] = wheel;
          const tm = vehicle.getChassisWorldTransform();
          const p = tm.getOrigin();
          const q = tm.getRotation();
          //console.log("chassi p = ",p.x());
          obj.position[idx] = [p.x(), p.y(), p.z()];
          obj.quaternion[idx] = [q.x(), q.y(), q.z(), q.w()];
          idx++;
        }
        io.emit('objpos', obj);
      })();
    });

    socket.on('getPos', (data) => {
      //console.dir(data);
      const obj = {};
      obj.name = data.name;
      obj.x = px[data.name];
      obj.y = py[data.name];
      obj.z = pz[data.name];
      io.emit('pos', obj);
      if (data.name == 99) {
        //console.log(obj);
      }
      //console.log(obj);
    });
    socket.on('carRest', (msg) => {
      for (const vehicle of vehicles) {
        //vehicle.setWorldTransform(transform);
        physicsWorld.removeAction(vehicle);
      }
      vehicles.splice(0, vehicles.length);

      addCars();
    });
    socket.on('car', (msg) => {
      //console.dir(msg);
      const carname = msg.car;
      gCarname2 = carname;
      if (controls[carname]) {
        //console.log(`controls ${carname}`);
        actions[carname].braking = false;
        actions[carname].acceleration = false;
        actions[carname].right = false;
        actions[carname].left = false;
        if (msg.moveBackward) {
          actions[carname].braking = true;
        }
        if (msg.moveForward) {
          actions[carname].acceleration = true;
        }
        if (msg.moveRight) {
          actions[carname].right = true;
        }
        if (msg.moveLeft) {
          actions[carname].left = true;
        }
        if (msg.release) {
          actions[carname].braking = false;
          actions[carname].acceleration = false;
          actions[carname].right = false;
          actions[carname].left = false;

        }
        //console.log(actions[carname]);
      }
    });

  });

  tick();
});

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3003');
app.set('port', port);

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);